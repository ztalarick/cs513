run
hist(myData)
var(y)
summary(y)
start()
nums  = c(20, 30, 50, 100)
for (trials in nums) {
pbinom(8.25, trials, .04)
}
nums  = c(20, 30, 50, 100)
for (trials in nums) {
print(pbinom(8.25, trials, .04))
}
nums  = c(20, 30, 50, 100)
for (trials in nums) {
print(pbinom(8.25, trials, .4))
}
seq<-rnorm(500)
cat1 <- vector()
cat2 <- vector()
cat3 <- vector()
cat4 <- vector()
cat5 <- vector()
for(value in seq) {
if (value <= -0.4) {
cat1 <- c(cat1, value)
} else if(value > -0.4 && value <= -0.2) {
cat2 <- c(cat2, value)
} else if(value > -0.2 && value <= 0.2) {
cat3 <- c(cat3, value)
} else if(value > 0.2 && value <= 0.4) {
cat4 <- c(cat4, value)
} else if (value > 0.4) {
cat5 <- c(cat5, value)
}
}
print(length(cat1))
print(length(cat2))
print(length(cat3))
print(length(cat4))
print(length(cat5))
if (value <= -0.4) {
cat1 <- c(cat1, value)
} else if(value > -0.4 && value <= -0.2) {
cat2 <- c(cat2, value)
} else if(value > -0.2 && value <= 0.2) {
cat3 <- c(cat3, value)
} else if(value > 0.2 && value <= 0.4) {
cat4 <- c(cat4, value)
} else if (value > 0.4) {
cat5 <- c(cat5, value)
}
seq<-rnorm(500)
cat1 <- vector()
cat2 <- vector()
cat3 <- vector()
cat4 <- vector()
cat5 <- vector()
for(value in seq) {
if (value <= -0.4) {
cat1 <- c(cat1, value)
} else if(value > -0.4 && value <= -0.2) {
cat2 <- c(cat2, value)
} else if(value > -0.2 && value <= 0.2) {
cat3 <- c(cat3, value)
} else if(value > 0.2 && value <= 0.4) {
cat4 <- c(cat4, value)
} else if (value > 0.4) {
cat5 <- c(cat5, value)
}
}
print(length(cat1))
print(length(cat2))
print(length(cat3))
print(length(cat4))
print(length(cat5))
seq<-rnorm(500)
cat1 <- vector()
cat2 <- vector()
cat3 <- vector()
cat4 <- vector()
cat5 <- vector()
for(value in seq) {
if (value <= -0.3) {
cat1 <- c(cat1, value)
} else if(value > -0.3 && value <= -0.1) {
cat2 <- c(cat2, value)
} else if(value > -0.1 && value <= 0.3) {
cat3 <- c(cat3, value)
} else if(value > 0.3 && value <= 0.5) {
cat4 <- c(cat4, value)
} else if (value > 0.5) {
cat5 <- c(cat5, value)
}
}
print(length(cat1))
print(length(cat2))
print(length(cat3))
print(length(cat4))
print(length(cat5))
setwd("/home/zach/Documents/Junior/CS513/final_proj")
data <- read.csv("atrition_data.csv")
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final_proj")
data <- read.csv("atrition_data.csv")
data <- read.csv("attrition_data.csv")
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final_proj")
data <- read.csv("attrition_data.csv")
setwd("/home/zach/Documents/Junior/CS513/final_proj")
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/hw6")
data <- read.csv("admission.csv")
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("admission.csv")
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission.csv")
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission.csv")
data <- data[c(-1, 5)]
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission.csv")
data <- data[c(-1, -5)]
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission.csv")
#remove Rank and ApplicantID
data <- data[c(-1, -5)]
k_means <- kmeans(data, centers=2, nstart=25)
str(k_means)
table(k_means, data[1])
table(k_means, data[admit])
table(k_means, data[ADMIT])
table(k_means, data[1])
table(k_means, data[2])
data[1]
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission.csv")
#remove Rank and ApplicantID
data <- data[c(-1, -5)]
k_means <- kmeans(data, centers=2, nstart=25)
str(k_means)
table(k_means$cluster, data[1])
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission.csv")
#remove Rank and ApplicantID
data <- data[c(-1, -5)]
k_means <- kmeans(data, centers=2, nstart=25)
str(k_means)
table(k_means$cluster, data$ADMIT)
?hclust
h_cluster <- hclust(dist(data_clustering))
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission.csv")
#remove Rank and ApplicantID
data <- data[c(-1, -5)]
data_clustering <- data[c(-1)]
#Part 1 k_means algorithm
k_means <- kmeans(data_clustering, centers=2, nstart=25)
str(k_means)
# Tabulate the clustered rows against the “ADMIT” column.
table(k_means$cluster, data$ADMIT)
h_cluster <- hclust(dist(data_clustering))
str(h_cluster)
table(h_cluster$cluster, data$ADMIT)
h_cluster <- hclust(dist(data_clustering))
pruned <- cutree(h_cluster, 2)
str(h_cluster)
table(pruned, data$ADMIT)
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
#get rid of Applicant ID
data <- data[c(-1)]
#split into train and test
index<-sort(sample(nrow(data2),round(.3*nrow(data2))))
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
#get rid of Applicant ID
data <- data[c(-1)]
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
library(randomForest)
model1 <- randomForest(Class ~ ., data = training, importance = TRUE)
model1 <- randomForest(ADMIT ~ ., data = training, importance = TRUE)
model1 <- randomForest(ADMIT ~ ., data = training, importance = TRUE)
str(model1)
model2 <- randomForest(Class ~ ., data = training, ntree = 500, mtry = 6, importance = TRUE)
model2 <- randomForest(ADMIT ~ ., data = training, ntree = 500, mtry = 6, importance = TRUE)
str(model2)
predTrain <- predict(model1, training, type = "class")
table(predTrain, training$Class)
predValid <- predict(model1, test, type = "class")
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
#get rid of Applicant ID
data <- data[c(-1)]
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
library(randomForest)
model1 <- randomForest(ADMIT ~ ., data = training, importance = TRUE)
str(model1)
model2 <- randomForest(ADMIT ~ ., data = training, ntree = 500, mtry = 6, importance = TRUE)
str(model2)
predTrain <- predict(model1, training, type = "class")
table(predTrain, training$ADMIT)
predValid <- predict(model1, test, type = "class")
mean(predValid == test$ADMIT) #model is terrible only predicts 1/3 of the time
table(predValid, test$ADMIT)
predTrain2 <- predict(model2, training, type = "class")
table(predTrain2, training$ADMIT)
predValid2 <- predict(model2, test, type = "class")
mean(predValid2 == test$ADMIT) #slightly better model, still not great
table(predValid2, test$ADMIT)
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
#get rid of Applicant ID
data <- data[c(-1)]
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
model1 <- randomForest(ADMIT ~ ., data = training, importance = TRUE)
str(model1)
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
#get rid of Applicant ID
data <- data[c(-1)]
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
library(randomForest)
model1 <- randomForest(ADMIT ~ ., data = training, importance = TRUE)
str(model1)
model2 <- randomForest(ADMIT ~ ., data = training, ntree = 500, mtry = 6, importance = TRUE)
str(model2)
predTrain <- predict(model1, training, type = "class")
table(predTrain, training$ADMIT)
predValid <- predict(model1, test, type = "class")
mean(predValid == test$ADMIT) #model is terrible only predicts 1/3 of the time
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
#get rid of Applicant ID
data <- data[c(-1)]
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
library(randomForest)
#### Random Forest Model ####
rf = randomForest(x = training[-1] ,y = training$ADMIT, ntree = 500)
# Random Forest Prediction
rf.predict = predict(rf, newdata = test[-1])
# Random Forest Confusion Matrix
library(caret)
rf.confusion = confusionMatrix(rf.predict, test$ADMIT)
rf.confusion
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
#get rid of Applicant ID
data <- data[c(-1)]
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
library(randomForest)
library(caret)
#### Random Forest Model ####
rf = randomForest(x = training[-1] ,y = training$ADMIT, ntree = 500)
# Random Forest Prediction
rf.predict = predict(rf, newdata = test[-1])
rf.confusion = confusionMatrix(rf.predict, test$ADMIT)
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
#get rid of Applicant ID
data <- data[c(-1)]
data$ADMIT= as.factor(data$ADMIT)
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
library(randomForest)
library(caret)
#### Random Forest Model ####
rf = randomForest(x = training[-1] ,y = training$ADMIT, ntree = 500)
# Random Forest Prediction
rf.predict = predict(rf, newdata = test[-1])
rf.confusion = confusionMatrix(rf.predict, test$ADMIT)
rf.confusion
# ROC Curve
pred.rf <- prediction(as.numeric(rf.predict), as.numeric(test$ADMIT))
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
#get rid of Applicant ID
data <- data[c(-1)]
data$ADMIT= as.factor(data$ADMIT)
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
library(randomForest)
library(caret)
#### Random Forest Model ####
rf = randomForest(x = training[-1] ,y = training$ADMIT, ntree = 500)
# Random Forest Prediction
rf.predict = predict(rf, newdata = test[-1])
rf.confusion = confusionMatrix(rf.predict, test$ADMIT)
rf.confusion
library('C50')
install.packages("C50")
#problem3
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
data <- data[c(-1)]
data$ADMIT= as.factor(data$ADMIT)
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
library('C50')
C50_class <- C5.0(x = training[-1], y = training$ADMIT)
summary(C50_class )
C50_predict<-predict( C50_class ,test , type="class" )
table(actual=test[,4],C50=C50_predict)
wrong<- (test[,4]!=C50_predict)
c50_rate<-sum(wrong)/length(test[,4])
c50_rate
#problem3
rm(list=ls())
setwd("/home/zach/Documents/Junior/CS513/final")
data <- read.csv("Admission_cat.csv")
data <- data[c(-1)]
data$ADMIT= as.factor(data$ADMIT)
#split into train and test
index<-sort(sample(nrow(data),round(.3*nrow(data))))
training<-data[-index,]
test<-data[index,]
library('C50')
C50_class <- C5.0(x = training[-1], y = training$ADMIT)
summary(C50_class )
C50_predict<-predict( C50_class ,test[-1] , type="class" )
library(caret)
C50_confusion = confusionMatrix(rC50_predict, test$ADMIT)
C50_confusion = confusionMatrix(C50_predict, test$ADMIT)
c50_confusion
C50_confusion
